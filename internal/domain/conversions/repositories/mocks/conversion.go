// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/conversions/repositories/conversion.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	dto "github.com/trwndh/game-currency/internal/domain/conversions/dto"
	entity "github.com/trwndh/game-currency/internal/domain/conversions/entity"
	reflect "reflect"
)

// MockConversion is a mock of Conversion interface
type MockConversion struct {
	ctrl     *gomock.Controller
	recorder *MockConversionMockRecorder
}

// MockConversionMockRecorder is the mock recorder for MockConversion
type MockConversionMockRecorder struct {
	mock *MockConversion
}

// NewMockConversion creates a new mock instance
func NewMockConversion(ctrl *gomock.Controller) *MockConversion {
	mock := &MockConversion{ctrl: ctrl}
	mock.recorder = &MockConversionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConversion) EXPECT() *MockConversionMockRecorder {
	return m.recorder
}

// CountExistingConversion mocks base method
func (m *MockConversion) CountExistingConversion(ctx context.Context, params dto.CreateConversionRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountExistingConversion", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountExistingConversion indicates an expected call of CountExistingConversion
func (mr *MockConversionMockRecorder) CountExistingConversion(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountExistingConversion", reflect.TypeOf((*MockConversion)(nil).CountExistingConversion), ctx, params)
}

// Create mocks base method
func (m *MockConversion) Create(ctx context.Context, params dto.CreateConversionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockConversionMockRecorder) Create(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConversion)(nil).Create), ctx, params)
}

// FindRate mocks base method
func (m *MockConversion) FindRate(ctx context.Context, params dto.CreateConversionRequest) (entity.ConversionRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRate", ctx, params)
	ret0, _ := ret[0].(entity.ConversionRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRate indicates an expected call of FindRate
func (mr *MockConversionMockRecorder) FindRate(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRate", reflect.TypeOf((*MockConversion)(nil).FindRate), ctx, params)
}

// FindCurrencyByID mocks base method
func (m *MockConversion) FindCurrencyByID(ctx context.Context, id int64) (entity.CurrencyDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCurrencyByID", ctx, id)
	ret0, _ := ret[0].(entity.CurrencyDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCurrencyByID indicates an expected call of FindCurrencyByID
func (mr *MockConversionMockRecorder) FindCurrencyByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCurrencyByID", reflect.TypeOf((*MockConversion)(nil).FindCurrencyByID), ctx, id)
}
